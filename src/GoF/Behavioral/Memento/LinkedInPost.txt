Picture yourself making a text editor app. Apart from basic text editing, your editor can also do things like formatting text and adding pictures within the text.

At one point, you thought it would be good to allow users to undo any changes they make to the text. This feature has become so common that people now assume every app should have it.

Now, here's the challenge:
Save the internal state of an object outside, so you can restore the object to that state later.


Solution:
We need to save an object's internal state externally, allowing us to revert to that state when necessary.

In this example, the Editor class (Originator) manages its state with the help of the inner EditorState class (Memento). The EditorHistory class (Caretaker) keeps track of saved states, allowing for easy undo functionality.

Understanding and implementing the Memento pattern can greatly enhance the flexibility of your applications, especially when it comes to managing and reverting object states.

Here's this simple example in C#: (GitHub) 

#CSharp #DesignPatterns #MementoPattern